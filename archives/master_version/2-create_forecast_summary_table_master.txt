#--------------------------------------------------------------------------
if (language == 'english') {
  # aWhere R Tutorial: Forecast summary table 
  #
  # Purpose of script: 
  # This code will show you how to access aWhere's forecast data from the API 
  # (Application Programming Interface) for your location(s) of interest. 
  # Prior to running this script, we enourage you to find the latitude and 
  # longitude of an area of interest by using Google Maps, QGIS and aWhere's 
  # geospatial files found on apps.awhere.com, or by using GPS points that you 
  # have previously collected. 
  #
  # The outputs of this script include a csv of the forecast 
  # (7-day, 168 hours) for your location of interest and a table of the 
  # forecast that can be embedded in reports or visuals for quick interpretation.
  #
  # You will need to be connected to the internet to run this script.
  #
  # Date updated: 2020-04-15
} else if (language == 'spanish') {
  # Tutorial de R de aWhere: Tabla resumen del pronostico
  #
  # Proposito del script:
  # Este codigo le mostrara como acceder a los datos del pronostico de aWhere
  # a partir de nuestro API (Interfaz de Programacion de Aplicaciones) para su area de interes.
  # Antes de ejecutar este script, le solicitamos encontrar la latitud y la longitud de su
  # sitio de interes, ya sea utilizando Google Maps, QGIS o bien, los archivos geoespaciales de
  # aWhere disponibles en apps.awhere.com o, utilizando puntos GPS que usted haya obtenido previamente.
  #
  # Las salidas de este script incluyen un pronostico (7-dias, 168 horas) en csv para su zona de interes
  # y una tabla del pronostico que puede ser incluida en distintos reportes o visualizaciones para una
  # rapida interprestacion.
  #
  # Usted necesita estar conectado a internet para ejecutar este codigo.
  #
  # Fecha de actualizacion: 2020-04-15
}

#--------------------------------------------------------------------------
if (language == 'english') {
  # Install and load packages -----------------------------------------------
  #
  # Clear your environment and remove all previous variables
} else if (language == 'spanish') {
  # Instalar y cargar paquetes ----------------------------------------------
  #
  # Limpie su entorno y remueva todas las variables previas
}
rm(list = ls())

if (language == 'english') {
  # Install the aWhere R Charts package, if you have not already
} else if (language == 'spanish') {
  # Instale el paquete aWhere R Charts, si usted aun no lo ha hecho
}
devtools::install_github("awhereAPI/aWhere-R-Charts")

if (language == 'english') {
  # Load the packages needed for this script.
  # If they have not been installed yet on your computer, 
  # using this code to install them: install.packages("NAME OF PACKAGE")
} else if (language == 'spanish') {
  # Cargue los paquetes necesarios para este script.
  # Si estos no han sido instalados aun en su computadora,
  # use este comando para instalarlo: install.packages("NOMBRE DEL PAQUETE")
}
library(aWhereAPI)
library(data.table)
library(gridExtra)
library(grid)
library(gtable)
library(grDevices)
library(dplyr)

if (language == 'english') {
  # Load aWhere credentials -------------------------------------------------
  #
  # You will need to load your credentials file which includes your aWhere 
  # key and secret, like a username and password. This gives you a token which 
  # shows that you have access to the API and all of aWhere's data. Your 
  # credentials should be kept in a location where you can easily find them. 
  # Copy the pathfile name and paste it below over the phrase, 
  # "YOUR CREDENTIALS HERE"
} else if (language == 'spanish') {
  # Cargue sus credenciales de aWhere ---------------------------------------
  #
  # Es necesario cargar su Archivo de Credenciales que incluye su Key & Secret
  # de aWhere, similar a un nombre de usuario y contrase?a. Esto le brinda una
  # especie de "Token" que muestra que usted tiene acceso al API y a todos los datos de aWhere.
  # Debe de mantener sus credenciales en una ubicacion que pueda hallar facilmente.
  # Copie la ruta de acceso de este archivo y pegue esta sobre la frase "YOUR CREDENTIALS HERE"
}
aWhereAPI::load_credentials("YOUR CREDENTIALS HERE")

if (language == 'english') {
  # Set working & output directories ----------------------------------------
  #
  # Next, you need to set your working directory. This is the location on your 
  # computer where R will automatically save the output files created by this 
  # script.
  #
  # To set your working directory, find the folder on your computer where you 
  # would like the outputs of this script to be saved, copy the pathfile name 
  # and paste it over the phrase, "YOUR WD HERE"
  #
  # This sets your working directory to the working_dir path
} else if (language == 'spanish') {
  # Establezca sus directorios de trabajo y de salidas ----------------------
  #
  # A continuacion, usted necesita establecer su directorio de trabajo. Este es el lugar
  # en su computadora en el que R va a guardar los archivos de salida de este script.
  #
  # Para establecer su directorio de trabajo, busque la carpeta en su computadora en la cual
  # usted desea que las salidas de este script se guarden, copie la ruta de acceso y pegue
  # esta sobre la frase "YOUR WD HERE"
  #
  # Esto establece su directorio de trabajo en la ruta de acceso de working_dir 
}
working_dir <- "YOUR WD HERE" 
setwd(working_dir) 
             
if (language == 'english') {
  # Now you will create the folder within your working directory where your 
  # output csv files will be saved. This line creates a folder in your working 
  # directory called outputCSVs. You can navigate to your working directory on 
  # your computer and see that this folder was created.
} else if (language == 'spanish') {
  # Ahora usted va a crear la carpeta dentro de su directorio de trabajo en la que
  # sus archivos csv de salida se van a guardar. La siguiente linea crea una carpeta
  # en su directorio de trabajo llamada outputCSVs.Puede navegar a su directorio de trabajo
  # en su computadora para verificar que esta carpeta fue creada.
}     
dir.create(path = 'outputCSVs/', showWarnings = FALSE, recursive = TRUE) 

if (language == 'english') {
  # Location(s) of interest -------------------------------------------------
  #
  # In this section, we will pull forecast data for your location of interest. 
  # First, determine the location's name, latitude, and longitude. 
  # You can use QGIS, Google Maps, or your own data to find this information.
  # Next, create a text file with this location information. Refer to 
  # the "locations.txt" text file example in the RunSet folder for formatting
  # this file. It must have 3 columns called place_name, latitude, longitude. 
  # An example of a row with location information would thus be:
  #     place_name, latitude, longitude
  #     Nairobi, -1.283, 36.816
  #
  # CHANGE THIS to the path and name of your locations text file
} else if (language == 'spanish') {
  # Sitio(s) de interes -----------------------------------------------------
  #
  # En esta seccion, vamos a obtener los datos del pronostico para su sitio de interes.
  # Primero, determine el nombre la ubicacion, su latitud y longitud.
  # Puede usar QGIS, Google Maps, o sus propios datos para encontrar esta informacion.
  # Seguidamente, un archivo de texto con la informacion de la ubicacion. 
  # Refierase al archivo de texto de ejemplo "locations.txt" en la carpeta RunSet para darle
  # formato a este archivo. Debe de tener 3 columnas con los nombres place_name, latitude, longitude.
  # Un ejemplo de una fila con la informacion de la ubicacion seria:
  #     place_name, latitude, longitude
  #     Nairobi, -1.283, 36.816
  #
  # CAMBIE ESTO por la ruta de acceso y nombre de su Archivo de Coordenadas
}
locations_file <- "RunSet/locations.txt"

if (language == 'english') {
  # Read the location(s) text file 
} else if (language == 'spanish') {
  # Lea su Archivo de Coordenadas
}
locations <- read.csv(locations_file)

if (language == 'english') {
  # Forecast summary table --------------------------------------------------
  #
  # The following is called a loop process - you only need to run the line 
  # that starts with "for", and the subsequent lines will automatically run 
  # until the end of the script. The forecast data and table outputs will be 
  # saved in your working directory.
} else if (language == 'spanish') {
  # Tabla resumen del pronostico --------------------------------------------
  #
  # Las siguientes lineas se denominan un loop (ciclo) - usted solo necesita ejecutar
  # la linea que comienza con un "for" y las lineas siguientes se ejecutaran automaticamente
  # hasta el final del script. Las salidas correspondientes a los datos y la tabla del pronostico
  # se guardaran automaticamente en su directorio de trabajo.
}

for (i in(1:nrow(locations))) { 

  if (language == 'english') {
    # Get the first latitude, longitude, and name of the current location
  } else if (language == 'spanish') {
    # Obtenga primero la latitud, longitud y nombre de la ubicacion actual
  }
  lat <- locations$latitude[i]
  lon <- locations$longitude[i]
  place_name <- locations$place_name[i]
  
  if (language == 'english') {
    # Pull the weather forecast directly from the aWhere API
  } else if (language == 'spanish') {
    # Obtenga el pronostico del tiempo directamente desde la API de aWhere
  }
  forecast<- aWhereAPI::forecasts_latlng(lat
                                        ,lon 
                                        ,day_start = as.character(Sys.Date()) 
                                        ,day_end = as.character(Sys.Date()+3)
                                        ,block_size = 6)  # MUST use 6 hours
  
  if (language == 'english') {
    # Save .csv file of the dataset in the outputCSVs folder created within 
    # your working directory
  } else if (language == 'spanish') {
    # Guarde el archivo .csv con el conjunto de datos en la carpeta outputCSVs 
    # que fue creada dentro de su directorio de trabajo
  }
  write.csv(forecast, 
            file = paste0("outputCSVs/",place_name,"_Forecast-6hour.csv"), 
            row.names=F) 
  if (language == 'english') {
    # Format the forecast data for a summary table --------------------------
    #
    # Select specific columns for the forecast summary
  } else if (language == 'spanish') {
    # Dar formato a sus datos pronosticados para la tabla-resumen -----------
    #
    # Seleccione columnas especificas para el resumen del pronostico
  }
  df_sub <- subset(forecast, select = c(1,2,3,6,7,8,9,10, 18))
  
  if (language == 'english') {
    # Here, is.num() is TRUE for numeric columns and FALSE otherwise. 
    # We then apply the "round" function to the numeric columns:
  } else if (language == 'spanish') {
    # A continuacion, is.num() tiene el valor TRUE para columnas numericas, y FALSE en el caso contrario.
    # Seguidamente, vamos a aplicar la funcion "round" a las columnas numericas:
  }
  is.num <- sapply(df_sub, is.numeric)
  df_sub[is.num] <- lapply(df_sub[is.num], round, 2)
  
  if (language == 'english') {
    # Shorten column names
  } else if (language == 'spanish') {
    # Acortando los nombres de las columnas
  }
  colnames(df_sub) <- c("Lat"
                        ,"Lon"
                        ,"dateTime"
                        ,"Conditions"
                        ,"Max_Temp"
                        ,"Min_Temp"
                        ,"Chance_Precip"
                        ,"Amount_Precip"
                        ,"Max_Wind")

  if (language == 'english') {
    # Convert the forecast data.frame to a data.table object
  } else if (language == 'spanish') {
    # Convirtiendo el data.frame del pronostico en un objeto del tipo data.table
  }
  df_sub <- data.table::as.data.table(df_sub)
  
  if (language == 'english') {
    # Shorten the string for conditions - drop GMT time zone
  } else if (language == 'spanish') {
    # Acortando el "string" a la naturaleza de los datos - Ajustando la zona horaria (dejando de lado el formato GMT)
  }
  df_sub[, c('date','startTime') := tstrsplit(x = dateTime
                                             ,split = 'T'
                                             ,fixed = TRUE)]
  
  df_sub[, c('startTime', 'timeZone') := tstrsplit(x = startTime
                                                 ,split = '\\+|-')]
  
  df_sub[, c('startHour', 'startMin', 'startSec') := tstrsplit(x = startTime
                                                            ,split = ':'
                                                            ,fixed = TRUE
                                                        ,type.convert = TRUE)]
  
  if (language == 'english') {
    # Wrap midnight (24:00) to become 00:00
  } else if (language == 'spanish') {
    # Cambiar el formato de la media noche (24:00) para que sean las 00:00 horas
  }
  df_sub[, endHour := startHour + 6]
  df_sub[endHour == 24, endHour := 0]
  
  if (language == 'english') {
    # Create timeString based on the hourly time block
  } else if (language == 'spanish') {
    # Crear un string de tiempo (timeString) con base en los bloques horarios de tiempo
  }
  df_sub[startHour == 0,  timeString := 'Midnight-0600']
  df_sub[startHour == 6,  timeString := '0600-Noon']
  df_sub[startHour == 12, timeString := 'Noon-1800']
  df_sub[startHour == 18, timeString := '1800-Midnight']
  
  if (language == 'english') {
    # Remove Columns not to be included in output
  } else if (language == 'spanish') {
    # Removiendo columnas para que no sean incluidas en el archivo de salida
  }
  df_sub[, c('dateTime'
            ,'timeZone'
            ,'startTime'
            ,'startMin'
            ,'startSec'
            ,'startHour'
            ,'endHour') := NULL]
  
  if (language == 'english') {
    # Reorder Columns
  } else if (language == 'spanish') {
    # Reordenando las columnas
  }
  df_sub = df_sub %>% dplyr::select(date
                                    ,timeString
                                    ,Max_Temp
                                    ,Min_Temp
                                    ,Chance_Precip
                                    ,Amount_Precip
                                    ,Max_Wind
                                    ,Conditions)          
  
  if (language == 'english') {
    # Convert Table to new format for formatting
  } else if (language == 'spanish') {
    # Convertir la Tabla a un nuevo formato para reformatearla posteriormente
  }
  table <- gridExtra::tableGrob(df_sub)
  
  title <- grid::textGrob(paste0("Place = ", place_name,
                           '   Latitude = ', lat,
                           '  Longitude = ', lon, '\n')
                           ,gp = grid::gpar(fontsize = 25))
  
  padding <- grid::unit(0.1,"line")
  
  table <- gtable::gtable_add_rows(table
                           ,heights = grid::grobHeight(title) + padding
                           ,pos = 0)
  
  table <- gtable::gtable_add_grob(table
                           ,list(title)
                           ,t = 1
                           ,l = 1
                           ,r = ncol(table))

  if (language == 'english') {
    # Save the forecast summary table as an image
  } else if (language == 'spanish') {
    # Guardar la Tabla Resumen del Pronostico como una imagen
  }
  out_file = paste0(place_name,"_table.png")
  grDevices::png(filename = out_file, 
                 width = 980,
                 height = 780,
                 bg = "white")
  
  grid::grid.draw(table)
  dev.off()
  
}
